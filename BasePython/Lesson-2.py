'''
# Задание 1.
# Создать список и заполнить его элементами различных типов данных.
# Реализовать скрипт проверки типа данных каждого элемента.
# Использовать функцию type() для проверки типа.
# Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.

lst = [True, None, 3.5, 1, 'hello']
for i in lst:
    print(type(i))
'''
####################################################################################################
'''
# Задание 2.
# Для списка реализовать обмен значений соседних элементов.
# Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т. д.
# При нечётном количестве элементов последний сохранить на своём месте.
# Для заполнения списка элементов нужно использовать функцию input().

lst2 = list(input())
n = 0
for i in range(int(len(lst2)/2)):
    lst2[n], lst2[n+1] = lst2[n+1], lst2[n]
    n += 2
print(lst2)
'''
####################################################################################################
'''
# Задание 3.
# Пользователь вводит месяц в виде целого числа от 1 до 12.
# Сообщить, к какому времени года относится месяц (зима, весна, лето, осень).
# Напишите решения через list и dict.

months_int = [x for x in range(1, 13)]
months_str = ['зима' for x in range(2)] + \
             ['весна' for x in range(3)] + \
             ['лето' for x in range(3)] + \
             ['осень' for x in range(3)] + \
             ['зима']
dct = dict(zip(months_int, months_str))
#print(dct)
n = int(input('Введитеномер месяца: '))
print(n, 'месяц -', dct[n])
'''
####################################################################################################
'''
# Задание 4.
# Пользователь вводит строку из нескольких слов, разделённых пробелами.
# Вывести каждое слово с новой строки. Строки нужно пронумеровать.
# Если слово длинное, выводить только первые 10 букв в слове.

stroka = input('Введите слова, разделяя их пробелом: ')
lststr = stroka.split(' ')

for i in range(len(lststr)):
    print(str((i+1)) + '. ' + lststr[i][:10])
    i += 1
'''
####################################################################################################
'''
# Задание 5.
# Реализовать структуру «Рейтинг», представляющую собой набор натуральных чисел, который не возрастает.
# У пользователя нужно запрашивать новый элемент рейтинга.
# Если в рейтинге существуют элементы с одинаковыми значениями,
# то новый элемент с тем же значением должен разместиться после них.

reiting_list = [6, 5, 4, 8, 2, 1]
x = int(input('Введите число: '))
reiting_list = reiting_list + [x]
reiting_list.sort(reverse=True)
reiting_list.pop(6)  #т.к. набор не возрастает, удаляем крайний элемент
print(reiting_list)
'''
####################################################################################################

# Задание 6.
# Реализовать структуру данных «Товары».
# Она должна представлять собой список кортежей.
# Каждый кортеж хранит информацию об отдельном товаре.
# В кортеже должно быть два элемента — номер товара и словарь с параметрами,
# то есть характеристиками товара: название, цена, количество, единица измерения.
# Структуру нужно сформировать программно, запросив все данные у пользователя.
'''
Пример готовой структуры:

[
(1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
(2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}),
(3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})
]

Нужно собрать аналитику о товарах. Реализовать словарь, в котором каждый ключ — характеристика товара, например, 
название. Тогда значение — список значений-характеристик, например, список названий товаров.
Пример:

{
“название”: [“компьютер”, “принтер”, “сканер”],
“цена”: [20000, 6000, 2000],
“количество”: [5, 2, 7],
“ед”: [“шт.”]
}
'''

'''
print('Формирование структуры данных «Товары»:')
products = []
key_list = ['название', 'цена', 'количество', 'ед. изм.']
vel_list = []

continueInput = True
el = 1

while continueInput:

    for i in range(len(key_list)): #запрашиваем значения для ключей
        vel_list.insert((i), input('Введите ' + key_list[i] + ': '))

    dct_product = dict(zip(key_list, vel_list)) #собираем словарь из ключей и значений для одного товара
    #print(dct_product)
    cort1 = ((el), dct_product) #формируем кортеж для одного товара
    products.append(cort1)
    continueInput = input('Добавить следующий товар? y/n: ') == 'y'
    el += 1

print(*products, sep='\n')

#аналитика. Скопировал, не понял как работает

dct_analitic = {k: list(set([el[k] for ind, el in products])) for k in key_list}
print(dct_analitic)
'''
